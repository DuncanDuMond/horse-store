// Contract Creation Code
// 0x6080604052600c8054600160ff199182168117909255601e8054909116909117905534801561002c575f80fd5b50610eed8061003a5f395ff3

// Runtime Code
// fe608060405234801561000f575f80fd5b50600436106100fb575f3560e01c8063779242eb11610093578063ba414fa611610063578063ba414fa6146101d1578063e20c9f71146101e9578063e9965913146101f1578063fa7626d41461023a575f80fd5b8063779242eb1461017c57806385226c81146101ac578063916a17c6146101c1578063b5508aa9146101c9575f80fd5b80633e5e3c23116100ce5780633e5e3c231461014f5780633f7286f4146101575780635a0f97151461015f57806366d9a9a014610167575f80fd5b80630a9254e4146100ff5780631d572588146101095780631ed7831c1461011c5780632ade38801461013a575b5f80fd5b610107610247565b005b610107610117366004610b19565b610295565b610124610373565b6040516101319190610b30565b60405180910390f35b6101426103d3565b6040516101319190610bbf565b61012461050f565b61012461056d565b6101076105cb565b61016f61064d565b6040516101319190610c7e565b601e546101949061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610131565b6101b461072e565b6040516101319190610d2f565b61016f6107f9565b6101b46108da565b6101d96109a5565b6040519015158152602001610131565b610124610a45565b61022d6040518060400160405280601781526020017f686f72736553746f726556312f486f72736553746f726500000000000000000081525081565b6040516101319190610d8f565b601e546101d99060ff1681565b60405161025390610b0d565b604051809103905ff08015801561026c573d5f803e3d5ffd5b50601e60016101000a8154816001600160a01b0302191690836001600160a01b03160217905550565b601e546040516366ff569760e11b8152600481018390526101009091046001600160a01b03169063cdfead2e906024015f604051808303815f87803b1580156102dc575f80fd5b505af11580156102ee573d5f803e3d5ffd5b50505050610370601e60019054906101000a90046001600160a01b03166001600160a01b031663e026c0176040518163ffffffff1660e01b8152600401602060405180830381865afa158015610346573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036a9190610da8565b82610aa3565b50565b606060168054806020026020016040519081016040528092919081815260200182805480156103c957602002820191905f5260205f20905b81546001600160a01b031681526001909101906020018083116103ab575b5050505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610506575f84815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b828210156104ef578382905f5260205f2001805461046490610dbf565b80601f016020809104026020016040519081016040528092919081815260200182805461049090610dbf565b80156104db5780601f106104b2576101008083540402835291602001916104db565b820191905f5260205f20905b8154815290600101906020018083116104be57829003601f168201915b505050505081526020019060010190610447565b5050505081525050815260200190600101906103f6565b50505050905090565b606060188054806020026020016040519081016040528092919081815260200182805480156103c957602002820191905f5260205f209081546001600160a01b031681526001909101906020018083116103ab575050505050905090565b606060178054806020026020016040519081016040528092919081815260200182805480156103c957602002820191905f5260205f209081546001600160a01b031681526001909101906020018083116103ab575050505050905090565b5f601e60019054906101000a90046001600160a01b03166001600160a01b031663e026c0176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106419190610da8565b9050610370815f610aa3565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610506575f8481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561071657602002820191905f5260205f20905f905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106d85790505b50505050508152505081526020019060010190610670565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610506578382905f5260205f2001805461076e90610dbf565b80601f016020809104026020016040519081016040528092919081815260200182805461079a90610dbf565b80156107e55780601f106107bc576101008083540402835291602001916107e5565b820191905f5260205f20905b8154815290600101906020018083116107c857829003601f168201915b505050505081526020019060010190610751565b6060601c805480602002602001604051908101604052809291908181526020015f905b82821015610506575f8481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156108c257602002820191905f5260205f20905f905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116108845790505b5050505050815250508152602001906001019061081c565b60606019805480602002602001604051908101604052809291908181526020015f905b82821015610506578382905f5260205f2001805461091a90610dbf565b80601f016020809104026020016040519081016040528092919081815260200182805461094690610dbf565b80156109915780601f1061096857610100808354040283529160200191610991565b820191905f5260205f20905b81548152906001019060200180831161097457829003601f168201915b5050505050815260200190600101906108fd565b6008545f9060ff16156109bc575060085460ff1690565b604051630667f9d760e41b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190526519985a5b195960d21b60248301525f9163667f9d7090604401602060405180830381865afa158015610a1a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a3e9190610da8565b1415905090565b606060158054806020026020016040519081016040528092919081815260200182805480156103c957602002820191905f5260205f209081546001600160a01b031681526001909101906020018083116103ab575050505050905090565b60405163260a5b1560e21b81526004810183905260248101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906398296c54906044015f6040518083038186803b158015610af3575f80fd5b505afa158015610b05573d5f803e3d5ffd5b505050505050565b60c080610df883390190565b5f60208284031215610b29575f80fd5b5035919050565b602080825282518282018190525f9190848201906040850190845b81811015610b705783516001600160a01b031683529284019291840191600101610b4b565b50909695505050505050565b5f81518084525f5b81811015610ba057602081850181015186830182015201610b84565b505f602082860101526020601f19601f83011685010191505092915050565b602080825282518282018190525f919060409081850190600581811b8701840188860187805b85811015610c6e57603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015610c5857605f19898503018352610c46848651610b7c565b948e01949350918d0191600101610c2a565b505050978a019794505091880191600101610be5565b50919a9950505050505050505050565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f805b84811015610d2057898403603f19018652825180516001600160a01b03168552880151888501889052805188860181905290890190839060608701905b80831015610d0b5783516001600160e01b0319168252928b019260019290920191908b0190610ce1565b50978a01979550505091870191600101610ca4565b50919998505050505050505050565b5f602080830181845280855180835260408601915060408160051b87010192508387015f5b82811015610d8257603f19888603018452610d70858351610b7c565b94509285019290850190600101610d54565b5092979650505050505050565b602081525f610da16020830184610b7c565b9392505050565b5f60208284031215610db8575f80fd5b5051919050565b600181811c90821680610dd357607f821691505b602082108103610df157634e487b7160e01b5f52602260045260245ffd5b5091905056fe6080604052348015600e575f80fd5b5060a58061001b5f395ff3fe6080604052348015600e575f80fd5b50600436106030575f3560e01c8063cdfead2e146034578063e026c017146045575b5f80fd5b6043603f3660046059565b5f55565b005b5f5460405190815260200160405180910390f35b5f602082840312156068575f80fd5b503591905056

// Metadata
// fea2646970667358221220c276cfaa26a978c7cbd6472fe8f6998f4608429a6fb1e97f12f1b1fd0b52111d64736f6c63430008140033a2646970667358221220ddf4c2807e7db15763c89d2b1c4b23594ebca6689868ea8002da06c2e7d85d2164736f6c63430008140033

// 3 sections:
// 1. Contract Creation
// 2. Runtime
// 3. Metadata

// Contract Creation Code
PUSH1 0x80                // [0x80]
PUSH1 0x40                // [0x40, 0x80]
MSTORE                    // []

// What does this do? (See line 2761)
// If someone sent value with this call, jump to the 0x0E PC/JumpDest -> revert!
// Otherwise, jump, to continue execution
PUSH1 0x0c
DUP1
SLOAD
PUSH1 0x01
PUSH1 0xff
NOT
SWAP2
DUP3
AND
DUP2
OR
SWAP1
SWAP3
SSTORE
PUSH1 0x1e
DUP1
SLOAD
SWAP1
SWAP2
AND
SWAP1
SWAP2
OR
SWAP1
SSTORE
CALLVALUE               
DUP1                    
ISZERO                  
PUSH2 0x002c            
JUMPI                   
PUSH0                   
DUP1                    
REVERT
JUMPDEST
POP
PUSH2 0x0eed
DUP1
PUSH2 0x003a
PUSH0
CODECOPY
PUSH0
RETURN
INVALID
PUSH1 0x80
PUSH1 0x40
MSTORE
CALLVALUE
DUP1
ISZERO
PUSH2 0x000f
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
PUSH1 0x04
CALLDATASIZE
LT
PUSH2 0x00fb
JUMPI
PUSH0
CALLDATALOAD
PUSH1 0xe0
SHR
DUP1
PUSH4 0x779242eb
GT
PUSH2 0x0093
JUMPI
DUP1
PUSH4 0xba414fa6
GT
PUSH2 0x0063
JUMPI
DUP1
PUSH4 0xba414fa6
EQ
PUSH2 0x01d1
JUMPI
DUP1
PUSH4 0xe20c9f71
EQ
PUSH2 0x01e9
JUMPI
DUP1
PUSH4 0xe9965913
EQ
PUSH2 0x01f1
JUMPI
DUP1
PUSH4 0xfa7626d4
EQ
PUSH2 0x023a
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
DUP1
PUSH4 0x779242eb
EQ
PUSH2 0x017c
JUMPI
DUP1
PUSH4 0x85226c81
EQ
PUSH2 0x01ac
JUMPI
DUP1
PUSH4 0x916a17c6
EQ
PUSH2 0x01c1
JUMPI
DUP1
PUSH4 0xb5508aa9
EQ
PUSH2 0x01c9
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
DUP1
PUSH4 0x3e5e3c23
GT
PUSH2 0x00ce
JUMPI
DUP1
PUSH4 0x3e5e3c23
EQ
PUSH2 0x014f
JUMPI
DUP1
PUSH4 0x3f7286f4
EQ
PUSH2 0x0157
JUMPI
DUP1
PUSH4 0x5a0f9715
EQ
PUSH2 0x015f
JUMPI
DUP1
PUSH4 0x66d9a9a0
EQ
PUSH2 0x0167
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
DUP1
PUSH4 0x0a9254e4
EQ
PUSH2 0x00ff
JUMPI
DUP1
PUSH4 0x1d572588
EQ
PUSH2 0x0109
JUMPI
DUP1
PUSH4 0x1ed7831c
EQ
PUSH2 0x011c
JUMPI
DUP1
PUSH4 0x2ade3880
EQ
PUSH2 0x013a
JUMPI
JUMPDEST
PUSH0
DUP1
REVERT
JUMPDEST
PUSH2 0x0107
PUSH2 0x0247
JUMP
JUMPDEST
STOP
JUMPDEST
PUSH2 0x0107
PUSH2 0x0117
CALLDATASIZE
PUSH1 0x04
PUSH2 0x0b19
JUMP
JUMPDEST
PUSH2 0x0295
JUMP
JUMPDEST
PUSH2 0x0124
PUSH2 0x0373
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
PUSH2 0x0131
SWAP2
SWAP1
PUSH2 0x0b30
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN
JUMPDEST
PUSH2 0x0142
PUSH2 0x03d3
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
PUSH2 0x0131
SWAP2
SWAP1
PUSH2 0x0bbf
JUMP
JUMPDEST
PUSH2 0x0124
PUSH2 0x050f
JUMP
JUMPDEST
PUSH2 0x0124
PUSH2 0x056d
JUMP
JUMPDEST
PUSH2 0x0107
PUSH2 0x05cb
JUMP
JUMPDEST
PUSH2 0x016f
PUSH2 0x064d
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
PUSH2 0x0131
SWAP2
SWAP1
PUSH2 0x0c7e
JUMP
JUMPDEST
PUSH1 0x1e
SLOAD
PUSH2 0x0194
SWAP1
PUSH2 0x0100
SWAP1
DIV
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP2
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
SWAP1
SWAP2
AND
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH2 0x0131
JUMP
JUMPDEST
PUSH2 0x01b4
PUSH2 0x072e
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
PUSH2 0x0131
SWAP2
SWAP1
PUSH2 0x0d2f
JUMP
JUMPDEST
PUSH2 0x016f
PUSH2 0x07f9
JUMP
JUMPDEST
PUSH2 0x01b4
PUSH2 0x08da
JUMP
JUMPDEST
PUSH2 0x01d9
PUSH2 0x09a5
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
SWAP1
ISZERO
ISZERO
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH2 0x0131
JUMP
JUMPDEST
PUSH2 0x0124
PUSH2 0x0a45
JUMP
JUMPDEST
PUSH2 0x022d
PUSH1 0x40
MLOAD
DUP1
PUSH1 0x40
ADD
PUSH1 0x40
MSTORE
DUP1
PUSH1 0x17
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH32 0x686f72736553746f726556312f486f72736553746f7265000000000000000000
DUP2
MSTORE
POP
DUP2
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
PUSH2 0x0131
SWAP2
SWAP1
PUSH2 0x0d8f
JUMP
JUMPDEST
PUSH1 0x1e
SLOAD
PUSH2 0x01d9
SWAP1
PUSH1 0xff
AND
DUP2
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
PUSH2 0x0253
SWAP1
PUSH2 0x0b0d
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
PUSH0
CREATE
DUP1
ISZERO
DUP1
ISZERO
PUSH2 0x026c
JUMPI
RETURNDATASIZE
PUSH0
DUP1
RETURNDATACOPY
RETURNDATASIZE
PUSH0
REVERT
JUMPDEST
POP
PUSH1 0x1e
PUSH1 0x01
PUSH2 0x0100
EXP
DUP2
SLOAD
DUP2
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
MUL
NOT
AND
SWAP1
DUP4
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
MUL
OR
SWAP1
SSTORE
POP
JUMP
JUMPDEST
PUSH1 0x1e
SLOAD
PUSH1 0x40
MLOAD
PUSH4 0x66ff5697
PUSH1 0xe1
SHL
DUP2
MSTORE
PUSH1 0x04
DUP2
ADD
DUP4
SWAP1
MSTORE
PUSH2 0x0100
SWAP1
SWAP2
DIV
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
SWAP1
PUSH4 0xcdfead2e
SWAP1
PUSH1 0x24
ADD
PUSH0
PUSH1 0x40
MLOAD
DUP1
DUP4
SUB
DUP2
PUSH0
DUP8
DUP1
EXTCODESIZE
ISZERO
DUP1
ISZERO
PUSH2 0x02dc
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
GAS
CALL
ISZERO
DUP1
ISZERO
PUSH2 0x02ee
JUMPI
RETURNDATASIZE
PUSH0
DUP1
RETURNDATACOPY
RETURNDATASIZE
PUSH0
REVERT
JUMPDEST
POP
POP
POP
POP
PUSH2 0x0370
PUSH1 0x1e
PUSH1 0x01
SWAP1
SLOAD
SWAP1
PUSH2 0x0100
EXP
SWAP1
DIV
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
PUSH4 0xe026c017
PUSH1 0x40
MLOAD
DUP2
PUSH4 0xffffffff
AND
PUSH1 0xe0
SHL
DUP2
MSTORE
PUSH1 0x04
ADD
PUSH1 0x20
PUSH1 0x40
MLOAD
DUP1
DUP4
SUB
DUP2
DUP7
GAS
STATICCALL
ISZERO
DUP1
ISZERO
PUSH2 0x0346
JUMPI
RETURNDATASIZE
PUSH0
DUP1
RETURNDATACOPY
RETURNDATASIZE
PUSH0
REVERT
JUMPDEST
POP
POP
POP
POP
PUSH1 0x40
MLOAD
RETURNDATASIZE
PUSH1 0x1f
NOT
PUSH1 0x1f
DUP3
ADD
AND
DUP3
ADD
DUP1
PUSH1 0x40
MSTORE
POP
DUP2
ADD
SWAP1
PUSH2 0x036a
SWAP2
SWAP1
PUSH2 0x0da8
JUMP
JUMPDEST
DUP3
PUSH2 0x0aa3
JUMP
JUMPDEST
POP
JUMP
JUMPDEST
PUSH1 0x60
PUSH1 0x16
DUP1
SLOAD
DUP1
PUSH1 0x20
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
DUP1
SLOAD
DUP1
ISZERO
PUSH2 0x03c9
JUMPI
PUSH1 0x20
MUL
DUP3
ADD
SWAP2
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
SWAP1
JUMPDEST
DUP2
SLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP2
MSTORE
PUSH1 0x01
SWAP1
SWAP2
ADD
SWAP1
PUSH1 0x20
ADD
DUP1
DUP4
GT
PUSH2 0x03ab
JUMPI
JUMPDEST
POP
POP
POP
POP
POP
SWAP1
POP
SWAP1
JUMP
JUMPDEST
PUSH1 0x60
PUSH1 0x1d
DUP1
SLOAD
DUP1
PUSH1 0x20
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH0
SWAP1
JUMPDEST
DUP3
DUP3
LT
ISZERO
PUSH2 0x0506
JUMPI
PUSH0
DUP5
DUP2
MSTORE
PUSH1 0x20
DUP1
DUP3
KECCAK256
PUSH1 0x40
DUP1
MLOAD
DUP1
DUP3
ADD
DUP3
MSTORE
PUSH1 0x02
DUP8
MUL
SWAP1
SWAP3
ADD
DUP1
SLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP4
MSTORE
PUSH1 0x01
DUP2
ADD
DUP1
SLOAD
DUP4
MLOAD
DUP2
DUP8
MUL
DUP2
ADD
DUP8
ADD
SWAP1
SWAP5
MSTORE
DUP1
DUP5
MSTORE
SWAP4
SWAP6
SWAP2
SWAP5
DUP7
DUP2
ADD
SWAP5
SWAP2
SWAP3
SWAP1
DUP5
ADD
JUMPDEST
DUP3
DUP3
LT
ISZERO
PUSH2 0x04ef
JUMPI
DUP4
DUP3
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
ADD
DUP1
SLOAD
PUSH2 0x0464
SWAP1
PUSH2 0x0dbf
JUMP
JUMPDEST
DUP1
PUSH1 0x1f
ADD
PUSH1 0x20
DUP1
SWAP2
DIV
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
DUP1
SLOAD
PUSH2 0x0490
SWAP1
PUSH2 0x0dbf
JUMP
JUMPDEST
DUP1
ISZERO
PUSH2 0x04db
JUMPI
DUP1
PUSH1 0x1f
LT
PUSH2 0x04b2
JUMPI
PUSH2 0x0100
DUP1
DUP4
SLOAD
DIV
MUL
DUP4
MSTORE
SWAP2
PUSH1 0x20
ADD
SWAP2
PUSH2 0x04db
JUMP
JUMPDEST
DUP3
ADD
SWAP2
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
SWAP1
JUMPDEST
DUP2
SLOAD
DUP2
MSTORE
SWAP1
PUSH1 0x01
ADD
SWAP1
PUSH1 0x20
ADD
DUP1
DUP4
GT
PUSH2 0x04be
JUMPI
DUP3
SWAP1
SUB
PUSH1 0x1f
AND
DUP3
ADD
SWAP2
JUMPDEST
POP
POP
POP
POP
POP
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
PUSH1 0x01
ADD
SWAP1
PUSH2 0x0447
JUMP
JUMPDEST
POP
POP
POP
POP
DUP2
MSTORE
POP
POP
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
PUSH1 0x01
ADD
SWAP1
PUSH2 0x03f6
JUMP
JUMPDEST
POP
POP
POP
POP
SWAP1
POP
SWAP1
JUMP
JUMPDEST
PUSH1 0x60
PUSH1 0x18
DUP1
SLOAD
DUP1
PUSH1 0x20
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
DUP1
SLOAD
DUP1
ISZERO
PUSH2 0x03c9
JUMPI
PUSH1 0x20
MUL
DUP3
ADD
SWAP2
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
SWAP1
DUP2
SLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP2
MSTORE
PUSH1 0x01
SWAP1
SWAP2
ADD
SWAP1
PUSH1 0x20
ADD
DUP1
DUP4
GT
PUSH2 0x03ab
JUMPI
POP
POP
POP
POP
POP
SWAP1
POP
SWAP1
JUMP
JUMPDEST
PUSH1 0x60
PUSH1 0x17
DUP1
SLOAD
DUP1
PUSH1 0x20
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
DUP1
SLOAD
DUP1
ISZERO
PUSH2 0x03c9
JUMPI
PUSH1 0x20
MUL
DUP3
ADD
SWAP2
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
SWAP1
DUP2
SLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP2
MSTORE
PUSH1 0x01
SWAP1
SWAP2
ADD
SWAP1
PUSH1 0x20
ADD
DUP1
DUP4
GT
PUSH2 0x03ab
JUMPI
POP
POP
POP
POP
POP
SWAP1
POP
SWAP1
JUMP
JUMPDEST
PUSH0
PUSH1 0x1e
PUSH1 0x01
SWAP1
SLOAD
SWAP1
PUSH2 0x0100
EXP
SWAP1
DIV
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
PUSH4 0xe026c017
PUSH1 0x40
MLOAD
DUP2
PUSH4 0xffffffff
AND
PUSH1 0xe0
SHL
DUP2
MSTORE
PUSH1 0x04
ADD
PUSH1 0x20
PUSH1 0x40
MLOAD
DUP1
DUP4
SUB
DUP2
DUP7
GAS
STATICCALL
ISZERO
DUP1
ISZERO
PUSH2 0x061d
JUMPI
RETURNDATASIZE
PUSH0
DUP1
RETURNDATACOPY
RETURNDATASIZE
PUSH0
REVERT
JUMPDEST
POP
POP
POP
POP
PUSH1 0x40
MLOAD
RETURNDATASIZE
PUSH1 0x1f
NOT
PUSH1 0x1f
DUP3
ADD
AND
DUP3
ADD
DUP1
PUSH1 0x40
MSTORE
POP
DUP2
ADD
SWAP1
PUSH2 0x0641
SWAP2
SWAP1
PUSH2 0x0da8
JUMP
JUMPDEST
SWAP1
POP
PUSH2 0x0370
DUP2
PUSH0
PUSH2 0x0aa3
JUMP
JUMPDEST
PUSH1 0x60
PUSH1 0x1b
DUP1
SLOAD
DUP1
PUSH1 0x20
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH0
SWAP1
JUMPDEST
DUP3
DUP3
LT
ISZERO
PUSH2 0x0506
JUMPI
PUSH0
DUP5
DUP2
MSTORE
PUSH1 0x20
SWAP1
DUP2
SWAP1
KECCAK256
PUSH1 0x40
DUP1
MLOAD
DUP1
DUP3
ADD
DUP3
MSTORE
PUSH1 0x02
DUP7
MUL
SWAP1
SWAP3
ADD
DUP1
SLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP4
MSTORE
PUSH1 0x01
DUP2
ADD
DUP1
SLOAD
DUP4
MLOAD
DUP2
DUP8
MUL
DUP2
ADD
DUP8
ADD
SWAP1
SWAP5
MSTORE
DUP1
DUP5
MSTORE
SWAP4
SWAP5
SWAP2
SWAP4
DUP6
DUP4
ADD
SWAP4
SWAP3
DUP4
ADD
DUP3
DUP3
DUP1
ISZERO
PUSH2 0x0716
JUMPI
PUSH1 0x20
MUL
DUP3
ADD
SWAP2
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
SWAP1
PUSH0
SWAP1
JUMPDEST
DUP3
DUP3
SWAP1
SLOAD
SWAP1
PUSH2 0x0100
EXP
SWAP1
DIV
PUSH1 0xe0
SHL
PUSH1 0x01
PUSH1 0x01
PUSH1 0xe0
SHL
SUB
NOT
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
PUSH1 0x04
ADD
SWAP1
PUSH1 0x20
DUP3
PUSH1 0x03
ADD
DIV
SWAP3
DUP4
ADD
SWAP3
PUSH1 0x01
SUB
DUP3
MUL
SWAP2
POP
DUP1
DUP5
GT
PUSH2 0x06d8
JUMPI
SWAP1
POP
JUMPDEST
POP
POP
POP
POP
POP
DUP2
MSTORE
POP
POP
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
PUSH1 0x01
ADD
SWAP1
PUSH2 0x0670
JUMP
JUMPDEST
PUSH1 0x60
PUSH1 0x1a
DUP1
SLOAD
DUP1
PUSH1 0x20
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH0
SWAP1
JUMPDEST
DUP3
DUP3
LT
ISZERO
PUSH2 0x0506
JUMPI
DUP4
DUP3
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
ADD
DUP1
SLOAD
PUSH2 0x076e
SWAP1
PUSH2 0x0dbf
JUMP
JUMPDEST
DUP1
PUSH1 0x1f
ADD
PUSH1 0x20
DUP1
SWAP2
DIV
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
DUP1
SLOAD
PUSH2 0x079a
SWAP1
PUSH2 0x0dbf
JUMP
JUMPDEST
DUP1
ISZERO
PUSH2 0x07e5
JUMPI
DUP1
PUSH1 0x1f
LT
PUSH2 0x07bc
JUMPI
PUSH2 0x0100
DUP1
DUP4
SLOAD
DIV
MUL
DUP4
MSTORE
SWAP2
PUSH1 0x20
ADD
SWAP2
PUSH2 0x07e5
JUMP
JUMPDEST
DUP3
ADD
SWAP2
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
SWAP1
JUMPDEST
DUP2
SLOAD
DUP2
MSTORE
SWAP1
PUSH1 0x01
ADD
SWAP1
PUSH1 0x20
ADD
DUP1
DUP4
GT
PUSH2 0x07c8
JUMPI
DUP3
SWAP1
SUB
PUSH1 0x1f
AND
DUP3
ADD
SWAP2
JUMPDEST
POP
POP
POP
POP
POP
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
PUSH1 0x01
ADD
SWAP1
PUSH2 0x0751
JUMP
JUMPDEST
PUSH1 0x60
PUSH1 0x1c
DUP1
SLOAD
DUP1
PUSH1 0x20
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH0
SWAP1
JUMPDEST
DUP3
DUP3
LT
ISZERO
PUSH2 0x0506
JUMPI
PUSH0
DUP5
DUP2
MSTORE
PUSH1 0x20
SWAP1
DUP2
SWAP1
KECCAK256
PUSH1 0x40
DUP1
MLOAD
DUP1
DUP3
ADD
DUP3
MSTORE
PUSH1 0x02
DUP7
MUL
SWAP1
SWAP3
ADD
DUP1
SLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP4
MSTORE
PUSH1 0x01
DUP2
ADD
DUP1
SLOAD
DUP4
MLOAD
DUP2
DUP8
MUL
DUP2
ADD
DUP8
ADD
SWAP1
SWAP5
MSTORE
DUP1
DUP5
MSTORE
SWAP4
SWAP5
SWAP2
SWAP4
DUP6
DUP4
ADD
SWAP4
SWAP3
DUP4
ADD
DUP3
DUP3
DUP1
ISZERO
PUSH2 0x08c2
JUMPI
PUSH1 0x20
MUL
DUP3
ADD
SWAP2
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
SWAP1
PUSH0
SWAP1
JUMPDEST
DUP3
DUP3
SWAP1
SLOAD
SWAP1
PUSH2 0x0100
EXP
SWAP1
DIV
PUSH1 0xe0
SHL
PUSH1 0x01
PUSH1 0x01
PUSH1 0xe0
SHL
SUB
NOT
AND
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
PUSH1 0x04
ADD
SWAP1
PUSH1 0x20
DUP3
PUSH1 0x03
ADD
DIV
SWAP3
DUP4
ADD
SWAP3
PUSH1 0x01
SUB
DUP3
MUL
SWAP2
POP
DUP1
DUP5
GT
PUSH2 0x0884
JUMPI
SWAP1
POP
JUMPDEST
POP
POP
POP
POP
POP
DUP2
MSTORE
POP
POP
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
PUSH1 0x01
ADD
SWAP1
PUSH2 0x081c
JUMP
JUMPDEST
PUSH1 0x60
PUSH1 0x19
DUP1
SLOAD
DUP1
PUSH1 0x20
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH0
SWAP1
JUMPDEST
DUP3
DUP3
LT
ISZERO
PUSH2 0x0506
JUMPI
DUP4
DUP3
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
ADD
DUP1
SLOAD
PUSH2 0x091a
SWAP1
PUSH2 0x0dbf
JUMP
JUMPDEST
DUP1
PUSH1 0x1f
ADD
PUSH1 0x20
DUP1
SWAP2
DIV
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
DUP1
SLOAD
PUSH2 0x0946
SWAP1
PUSH2 0x0dbf
JUMP
JUMPDEST
DUP1
ISZERO
PUSH2 0x0991
JUMPI
DUP1
PUSH1 0x1f
LT
PUSH2 0x0968
JUMPI
PUSH2 0x0100
DUP1
DUP4
SLOAD
DIV
MUL
DUP4
MSTORE
SWAP2
PUSH1 0x20
ADD
SWAP2
PUSH2 0x0991
JUMP
JUMPDEST
DUP3
ADD
SWAP2
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
SWAP1
JUMPDEST
DUP2
SLOAD
DUP2
MSTORE
SWAP1
PUSH1 0x01
ADD
SWAP1
PUSH1 0x20
ADD
DUP1
DUP4
GT
PUSH2 0x0974
JUMPI
DUP3
SWAP1
SUB
PUSH1 0x1f
AND
DUP3
ADD
SWAP2
JUMPDEST
POP
POP
POP
POP
POP
DUP2
MSTORE
PUSH1 0x20
ADD
SWAP1
PUSH1 0x01
ADD
SWAP1
PUSH2 0x08fd
JUMP
JUMPDEST
PUSH1 0x08
SLOAD
PUSH0
SWAP1
PUSH1 0xff
AND
ISZERO
PUSH2 0x09bc
JUMPI
POP
PUSH1 0x08
SLOAD
PUSH1 0xff
AND
SWAP1
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
PUSH4 0x0667f9d7
PUSH1 0xe4
SHL
DUP2
MSTORE
PUSH20 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d
PUSH1 0x04
DUP3
ADD
DUP2
SWAP1
MSTORE
PUSH6 0x19985a5b1959
PUSH1 0xd2
SHL
PUSH1 0x24
DUP4
ADD
MSTORE
PUSH0
SWAP2
PUSH4 0x667f9d70
SWAP1
PUSH1 0x44
ADD
PUSH1 0x20
PUSH1 0x40
MLOAD
DUP1
DUP4
SUB
DUP2
DUP7
GAS
STATICCALL
ISZERO
DUP1
ISZERO
PUSH2 0x0a1a
JUMPI
RETURNDATASIZE
PUSH0
DUP1
RETURNDATACOPY
RETURNDATASIZE
PUSH0
REVERT
JUMPDEST
POP
POP
POP
POP
PUSH1 0x40
MLOAD
RETURNDATASIZE
PUSH1 0x1f
NOT
PUSH1 0x1f
DUP3
ADD
AND
DUP3
ADD
DUP1
PUSH1 0x40
MSTORE
POP
DUP2
ADD
SWAP1
PUSH2 0x0a3e
SWAP2
SWAP1
PUSH2 0x0da8
JUMP
JUMPDEST
EQ
ISZERO
SWAP1
POP
SWAP1
JUMP
JUMPDEST
PUSH1 0x60
PUSH1 0x15
DUP1
SLOAD
DUP1
PUSH1 0x20
MUL
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
SWAP1
DUP2
ADD
PUSH1 0x40
MSTORE
DUP1
SWAP3
SWAP2
SWAP1
DUP2
DUP2
MSTORE
PUSH1 0x20
ADD
DUP3
DUP1
SLOAD
DUP1
ISZERO
PUSH2 0x03c9
JUMPI
PUSH1 0x20
MUL
DUP3
ADD
SWAP2
SWAP1
PUSH0
MSTORE
PUSH1 0x20
PUSH0
KECCAK256
SWAP1
DUP2
SLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP2
MSTORE
PUSH1 0x01
SWAP1
SWAP2
ADD
SWAP1
PUSH1 0x20
ADD
DUP1
DUP4
GT
PUSH2 0x03ab
JUMPI
POP
POP
POP
POP
POP
SWAP1
POP
SWAP1
JUMP
JUMPDEST
PUSH1 0x40
MLOAD
PUSH4 0x260a5b15
PUSH1 0xe2
SHL
DUP2
MSTORE
PUSH1 0x04
DUP2
ADD
DUP4
SWAP1
MSTORE
PUSH1 0x24
DUP2
ADD
DUP3
SWAP1
MSTORE
PUSH20 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d
SWAP1
PUSH4 0x98296c54
SWAP1
PUSH1 0x44
ADD
PUSH0
PUSH1 0x40
MLOAD
DUP1
DUP4
SUB
DUP2
DUP7
DUP1
EXTCODESIZE
ISZERO
DUP1
ISZERO
PUSH2 0x0af3
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
GAS
STATICCALL
ISZERO
DUP1
ISZERO
PUSH2 0x0b05
JUMPI
RETURNDATASIZE
PUSH0
DUP1
RETURNDATACOPY
RETURNDATASIZE
PUSH0
REVERT
JUMPDEST
POP
POP
POP
POP
POP
POP
JUMP
JUMPDEST
PUSH1 0xc0
DUP1
PUSH2 0x0df8
DUP4
CODECOPY
ADD
SWAP1
JUMP
JUMPDEST
PUSH0
PUSH1 0x20
DUP3
DUP5
SUB
SLT
ISZERO
PUSH2 0x0b29
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
CALLDATALOAD
SWAP2
SWAP1
POP
JUMP
JUMPDEST
PUSH1 0x20
DUP1
DUP3
MSTORE
DUP3
MLOAD
DUP3
DUP3
ADD
DUP2
SWAP1
MSTORE
PUSH0
SWAP2
SWAP1
DUP5
DUP3
ADD
SWAP1
PUSH1 0x40
DUP6
ADD
SWAP1
DUP5
JUMPDEST
DUP2
DUP2
LT
ISZERO
PUSH2 0x0b70
JUMPI
DUP4
MLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP4
MSTORE
SWAP3
DUP5
ADD
SWAP3
SWAP2
DUP5
ADD
SWAP2
PUSH1 0x01
ADD
PUSH2 0x0b4b
JUMP
JUMPDEST
POP
SWAP1
SWAP7
SWAP6
POP
POP
POP
POP
POP
POP
JUMP
JUMPDEST
PUSH0
DUP2
MLOAD
DUP1
DUP5
MSTORE
PUSH0
JUMPDEST
DUP2
DUP2
LT
ISZERO
PUSH2 0x0ba0
JUMPI
PUSH1 0x20
DUP2
DUP6
ADD
DUP2
ADD
MLOAD
DUP7
DUP4
ADD
DUP3
ADD
MSTORE
ADD
PUSH2 0x0b84
JUMP
JUMPDEST
POP
PUSH0
PUSH1 0x20
DUP3
DUP7
ADD
ADD
MSTORE
PUSH1 0x20
PUSH1 0x1f
NOT
PUSH1 0x1f
DUP4
ADD
AND
DUP6
ADD
ADD
SWAP2
POP
POP
SWAP3
SWAP2
POP
POP
JUMP
JUMPDEST
PUSH1 0x20
DUP1
DUP3
MSTORE
DUP3
MLOAD
DUP3
DUP3
ADD
DUP2
SWAP1
MSTORE
PUSH0
SWAP2
SWAP1
PUSH1 0x40
SWAP1
DUP2
DUP6
ADD
SWAP1
PUSH1 0x05
DUP2
DUP2
SHL
DUP8
ADD
DUP5
ADD
DUP9
DUP7
ADD
DUP8
DUP1
JUMPDEST
DUP6
DUP2
LT
ISZERO
PUSH2 0x0c6e
JUMPI
PUSH1 0x3f
NOT
DUP12
DUP6
SUB
ADD
DUP8
MSTORE
DUP3
MLOAD
DUP1
MLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP6
MSTORE
DUP10
ADD
MLOAD
DUP10
DUP6
ADD
DUP10
SWAP1
MSTORE
DUP1
MLOAD
DUP10
DUP7
ADD
DUP2
SWAP1
MSTORE
SWAP1
DUP11
ADD
SWAP1
PUSH1 0x60
DUP2
DUP9
SHL
DUP8
ADD
DUP2
ADD
SWAP2
SWAP1
DUP8
ADD
SWAP1
DUP6
JUMPDEST
DUP2
DUP2
LT
ISZERO
PUSH2 0x0c58
JUMPI
PUSH1 0x5f
NOT
DUP10
DUP6
SUB
ADD
DUP4
MSTORE
PUSH2 0x0c46
DUP5
DUP7
MLOAD
PUSH2 0x0b7c
JUMP
JUMPDEST
SWAP5
DUP15
ADD
SWAP5
SWAP4
POP
SWAP2
DUP14
ADD
SWAP2
PUSH1 0x01
ADD
PUSH2 0x0c2a
JUMP
JUMPDEST
POP
POP
POP
SWAP8
DUP11
ADD
SWAP8
SWAP5
POP
POP
SWAP2
DUP9
ADD
SWAP2
PUSH1 0x01
ADD
PUSH2 0x0be5
JUMP
JUMPDEST
POP
SWAP2
SWAP11
SWAP10
POP
POP
POP
POP
POP
POP
POP
POP
POP
POP
JUMP
JUMPDEST
PUSH0
PUSH1 0x20
DUP1
DUP4
ADD
DUP2
DUP5
MSTORE
DUP1
DUP6
MLOAD
DUP1
DUP4
MSTORE
PUSH1 0x40
SWAP3
POP
DUP3
DUP7
ADD
SWAP2
POP
DUP3
DUP2
PUSH1 0x05
SHL
DUP8
ADD
ADD
DUP5
DUP9
ADD
PUSH0
DUP1
JUMPDEST
DUP5
DUP2
LT
ISZERO
PUSH2 0x0d20
JUMPI
DUP10
DUP5
SUB
PUSH1 0x3f
NOT
ADD
DUP7
MSTORE
DUP3
MLOAD
DUP1
MLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xa0
SHL
SUB
AND
DUP6
MSTORE
DUP9
ADD
MLOAD
DUP9
DUP6
ADD
DUP9
SWAP1
MSTORE
DUP1
MLOAD
DUP9
DUP7
ADD
DUP2
SWAP1
MSTORE
SWAP1
DUP10
ADD
SWAP1
DUP4
SWAP1
PUSH1 0x60
DUP8
ADD
SWAP1
JUMPDEST
DUP1
DUP4
LT
ISZERO
PUSH2 0x0d0b
JUMPI
DUP4
MLOAD
PUSH1 0x01
PUSH1 0x01
PUSH1 0xe0
SHL
SUB
NOT
AND
DUP3
MSTORE
SWAP3
DUP12
ADD
SWAP3
PUSH1 0x01
SWAP3
SWAP1
SWAP3
ADD
SWAP2
SWAP1
DUP12
ADD
SWAP1
PUSH2 0x0ce1
JUMP
JUMPDEST
POP
SWAP8
DUP11
ADD
SWAP8
SWAP6
POP
POP
POP
SWAP2
DUP8
ADD
SWAP2
PUSH1 0x01
ADD
PUSH2 0x0ca4
JUMP
JUMPDEST
POP
SWAP2
SWAP10
SWAP9
POP
POP
POP
POP
POP
POP
POP
POP
POP
JUMP
JUMPDEST
PUSH0
PUSH1 0x20
DUP1
DUP4
ADD
DUP2
DUP5
MSTORE
DUP1
DUP6
MLOAD
DUP1
DUP4
MSTORE
PUSH1 0x40
DUP7
ADD
SWAP2
POP
PUSH1 0x40
DUP2
PUSH1 0x05
SHL
DUP8
ADD
ADD
SWAP3
POP
DUP4
DUP8
ADD
PUSH0
JUMPDEST
DUP3
DUP2
LT
ISZERO
PUSH2 0x0d82
JUMPI
PUSH1 0x3f
NOT
DUP9
DUP7
SUB
ADD
DUP5
MSTORE
PUSH2 0x0d70
DUP6
DUP4
MLOAD
PUSH2 0x0b7c
JUMP
JUMPDEST
SWAP5
POP
SWAP3
DUP6
ADD
SWAP3
SWAP1
DUP6
ADD
SWAP1
PUSH1 0x01
ADD
PUSH2 0x0d54
JUMP
JUMPDEST
POP
SWAP3
SWAP8
SWAP7
POP
POP
POP
POP
POP
POP
POP
JUMP
JUMPDEST
PUSH1 0x20
DUP2
MSTORE
PUSH0
PUSH2 0x0da1
PUSH1 0x20
DUP4
ADD
DUP5
PUSH2 0x0b7c
JUMP
JUMPDEST
SWAP4
SWAP3
POP
POP
POP
JUMP
JUMPDEST
PUSH0
PUSH1 0x20
DUP3
DUP5
SUB
SLT
ISZERO
PUSH2 0x0db8
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
MLOAD
SWAP2
SWAP1
POP
JUMP
JUMPDEST
PUSH1 0x01
DUP2
DUP2
SHR
SWAP1
DUP3
AND
DUP1
PUSH2 0x0dd3
JUMPI
PUSH1 0x7f
DUP3
AND
SWAP2
POP
JUMPDEST
PUSH1 0x20
DUP3
LT
DUP2
SUB
PUSH2 0x0df1
JUMPI
PUSH4 0x4e487b71
PUSH1 0xe0
SHL
PUSH0
MSTORE
PUSH1 0x22
PUSH1 0x04
MSTORE
PUSH1 0x24
PUSH0
REVERT
JUMPDEST
POP
SWAP2
SWAP1
POP
JUMP
INVALID
PUSH1 0x80
PUSH1 0x40
MSTORE
CALLVALUE                   // [msg.value]
DUP1                        // [msg.value, msg.value]
ISZERO                      // [msg.value == 0, msg.value]
PUSH1 0x0e                  // [0x0E, msg.value == 0, msg.value]
JUMPI                       // [msg.value]
PUSH0                       // [0x00, msg.value]
DUP1                        // [0x00, 0x00, msg.value]
REVERT                      // [msg.value]

// Jump dest if msg.value == 0
// Sticks the runtime code on chain
JUMPDEST                    // [msg.value]
POP                         // []
PUSH1 0xa5                  // [0xa5]
DUP1                        // [0xa5, 0xa5]
PUSH2 0x001b                // [0x001b, 0xa5, 0xa5]
PUSH0                       // [0x00, 0x001b, 0xa5, 0xa5]
CODECOPY                    // [0xa5]
PUSH0                       // [0x00, 0xa5]
RETURN                      // []
INVALID                     // []

// Runtime code
// Entry point
// Free memory pointer
PUSH1 0x80
PUSH1 0x40
MSTORE                      // Memory [0x40: 0x80]

// Checking for msg.value, and if given, revert
CALLVALUE                   // [msg.value]
DUP1                        // [msg.value, msg.value]
ISZERO                      // [msg.value == 0, msg.value]
PUSH1 0x0e                  // [0x0E, msg.value == 0, msg.value]
JUMPI                       // [msg.value]
// Jump to "continue!" if msg.value == 0

PUSH0                       // [0x00, msg.value]
DUP1                        // [0x00, 0x00, msg.value]
REVERT                      // [msg.value]

// If msg.value == 0, start here!
// Continue with runtime code
// This is checking to see if there is enough calldata for a function selector
JUMPDEST                    // [msg.value]
POP                         // []
PUSH1 0x04                  // [0x04]
CALLDATASIZE                // [calldatasize, 0x04]
LT                          // [calldatasize < 0x04]
PUSH1 0x30                  // [0x30, calldatasize < 0x04]
JUMPI                       // []
// if calldatasize < 0x04, jump to "calldata_jump"

// Function dispatch in solidity
PUSH0                       // []
CALLDATALOAD                // [32bytes of calldata]
PUSH1 0xe0                  // [0xe0, 32bytes of calldata]
SHR                         // [calldata[0:4]] // function_selector

// Function dispatch for setNumberOfHorses
DUP1                        // [function_selector, function_selector]
PUSH4 0xcdfead2e            // [0xcdfead2e, function_selector, function_selector]
EQ                          // [function_selector == 0xcdfead2e, function_selector]
PUSH1 0x34                  // [0x34, function_selector == 0xcdfead2e, function_selector]
JUMPI                       // [function_selector]
// if function_selector == 0xcdfead2e -> set_number_of_horses

// Function dispatch for readNumberOfHorses
DUP1                        // [function_selector, function_selector]
PUSH4 0xe026c017            // [0xe026c017, function_selector, function_selector]
EQ                          // [function_selector == 0xe026c017, function_selector]
PUSH1 0x45                  // [0x45, function_selector == 0xe026c017, function_selector]
JUMPI                       // [function_selector]
// if function_selector == 0xe026c017 -> get_number_of_horses

// calldata_jump
// Revert Jumpdest
JUMPDEST                    // []
PUSH0                       // [0]
DUP1                        // [0, 0]
REVERT                      // []

// updateHorseNumber jump dest 1
// Setup jumping program counters in the stack
JUMPDEST                    // [function_selector]
PUSH1 0x43                  // [0x43, function_selector]
PUSH1 0x3f                  // [0x3f, 0x43, function_selector]
CALLDATASIZE                // [calldatasize, 0x3f, 0x43, function_selector]
PUSH1 0x04                  // [0x04, calldatasize, 0x3f, 0x43, function_selector]
PUSH1 0x59                  // [0x59, 0x04, calldatasize, 0x3f, 0x43, function_selector]
JUMP                        // [0x04, calldatasize, 0x3f, 0x43, function_selector]

// Jump dest 4
// We can finally run an sstore to save our value to storage:
// Function dispatch
// Check for msg.value
// Check that calldata is long enough
// Received the number to use from the calldata
JUMPDEST                    // [calldata (of numberToUpdate), 0x43, function_selector]
PUSH0                       // [0, calldata (of numberToUpdate), 0x43, function_selector]
SSTORE                      // [0x43, function_selector]
JUMP                        // [function_selector]
// Jump dest 5

// Jump dest 5
JUMPDEST                    // [function_selector]
STOP                        // [function_selector]

// readNumberOfHorses jump dest 1
// the only jumpdest for readNumberOfHorses
JUMPDEST                    // [function_selector]
PUSH0                       // [0, function_selector]
SLOAD                       // [numHorses, function_selector]
PUSH1 0x40                  // [0x40, numHorses, function_selector]
MSTORE                      
MLOAD                       // [0x80, numHorses, function_selector] // Memory [0x40: 0x80] (free memory pointer)
SWAP1                       // [numHorses, 0x80, function_selector]
DUP2                        // [0x80, numHorses, 0x80, function_selector]
MSTORE                      // [0x80, function_selector] Memory: 0x80: numHorses
PUSH1 0x20                  // [0x20, 0x80, function_selector]
ADD                         // [0xa0, function_selector]
PUSH1 0x40                  // [0x40, 0xa0, function_selector]
MLOAD                       // [0x80, 0xa0, function_selector]
DUP1                        // [0x80, 0x80, 0xa0, function_selector]
SWAP2                       // [0xa0, 0x80, 0x80, function_selector]
SUB                         // [0x20, 0x80, function_selector]
SWAP1                       // [0x80, 0x20, function_selector]
RETURN                      // [function_selector]

// updateHorseNumber jump dest 2
// Check to see if there is a value to update the horse number to
// 4 bytes for the function selector, 32 bytes for the horse number
JUMPDEST                        // [0x04, calldatasize, 0x3f, 0x43, function_selector]
PUSH0                           // [0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
PUSH1 0x20                      // [0x20, 0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
DUP3                            // [0x04, 0x20, 0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
DUP5                            // [calldatasize, 0x04, 0x20, 0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
SUB                             // [calldatasize - 0x04, 0x20, 0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
// is there more calldata than the selector?
SLT                             // [calldatasize - 0x04 < 0x20, 0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
ISZERO                          // [more_calldata_than_selector, 0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
PUSH1 0x68                      // [0x68, more_calldata_than_selector, 0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
JUMPI                           // [0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
// We are going to jump to jump dest if there is more calldata than the selector
// If there is not enough calldata, we will revert
// function selector + 0x20

// Revert if there is not enough calldata
PUSH0                           // [0, 0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
DUP1                            // [0, 0, 0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
REVERT                          // [0, 0x04, calldatasize, 0x3f, 0x43, function_selector]

// updateHorseNumber jump dest 3
// Grab the calldata for updating the horse number
// Delete some stuff in the stack
JUMPDEST                        // [0, 0x04, calldatasize, 0x3f, 0x43, function_selector]
POP                             // [0x04, calldatasize, 0x3f, 0x43, function_selector]

// Ignore the function selector, and just grab the data
// 0xcdfead2e is the function selector for setNumberOfHorses
CALLDATALOAD                    // [calldata (of numberToUpdate), calldatasize, 0x3f, 0x43, function_selector]
SWAP2                           // [0x3f, calldatasize, calldata (of numberToUpdate), 0x43, function_selector]
SWAP1                           // [calldatasize, 0x3f, calldata (of numberToUpdate), 0x43, function_selector]
POP                             // [0x3f, calldata (of numberToUpdate), 0x43, function_selector]
JUMP                            // [calldata (of numberToUpdate), 0x43, function_selector]
// jump to jump dest 4

// Metadata
INVALID
LOG2
PUSH5 0x6970667358
INVALID
SLT
KECCAK256
INVALID
PUSH23 0xcfaa26a978c7cbd6472fe8f6998f4608429a6fb1e97f12
CALL
INVALID
REVERT
SIGNEXTEND
MSTORE
GT
SAR
PUSH5 0x736f6c6343
STOP
ADDMOD
EQ
STOP
CALLER
LOG2
PUSH5 0x6970667358
INVALID
SLT
KECCAK256
INVALID
DELEGATECALL
INVALID
DUP1
PUSH31 0x7db15763c89d2b1c4b23594ebca6689868ea8002da06c2e7d85d2164736f6c
PUSH4 0x43000814
STOP
CALLER