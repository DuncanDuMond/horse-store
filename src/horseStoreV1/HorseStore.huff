// send calldata -> function dispatch -> function

// 60008060093d393df3 -> Contract Creation Bytecode
// "Hey, take the binary after me, and stick it on-chain"
//                    -> Runtime Code

/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns ()
#define function readNumberOfHorses() view returns (uint256)

/* Storage Slots */
#define constant NUMBER_OF_HORSES_LOCATION = FREE_STORAGE_POINTER()

/* Methods */
#define macro SET_NUMBER_OF_HORSES() = takes (0) returns (0) {
    // 1. Get the value from the calldata
    0x04 calldataload   // [value] -> 0x02 (fail) 0x03 (success)

    // 2. Give it a storage slot and a value
    [NUMBER_OF_HORSES_LOCATION]    // [ptr, value]

    // 3. sstore opcode to store the value in the slot
    sstore              // []
    stop
}

#define macro GET_NUMBER_OF_HORSES() = takes (0) returns (0) {
    // Load value from storage.
    [NUMBER_OF_HORSES_LOCATION]     // [ptr]
    sload                           // [value]

    // Store value in memory.
    0x00 mstore                     // [0, value] ([ptr] Memory[0] = value)

    // Return value
    0x20 0x00 return
}

// Let's find the function selector -> route it to the code that updates the horses
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    // shr cuts down the calldata to the first 4 bytes
    // Jump -> function data associated with the function selector
    // If f_select == updateHorseNumber -> jump to updateJump
    // If f_select == readHorseNumber -> jump to readJump
    // __FUNC_SIG("updateHorseNumber(uint256)")
    // cast sig "updateHorseNumber(uint256)"
    // dup1 0xcdfead2e eq set jumpi
    dup1 __FUNC_SIG(updateHorseNumber) eq updateJump jumpi
    
    // __FUNC_SIG("readNumberOfHorses()")
    // cast sig "readNumberOfHorses()"
    dup1 __FUNC_SIG(readNumberOfHorses) eq readJump jumpi

    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()
}